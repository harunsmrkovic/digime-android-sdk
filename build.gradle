/*
 * Copyright (c) 2009-2018 digi.me Limited. All rights reserved.
 */

apply from: 'config/gradle/versioning.gradle'

apply from: 'config/gradle/checkstyle.gradle'

buildscript {
    // Gradle will not find vars defined in an external file when referring to them
    // in the buildscript block, unless you link it from the buildscript block, too.
    apply from: 'config/gradle/versioning.gradle'

    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.androidGradlePlugin"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$versions.buildInfoExtractor"
        classpath 'digital.wup:android-maven-publish:3.2.0'
    }
}

allprojects {
    group = 'me.digi.sdk'
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
    project.ext {
        globalVersion = "unspecified"
    }
}

def projectVersion() {
    def versionClass = file('digime-core/src/main/java/me/digi/sdk/core/DigiMeSDKVersion.java')
    def outVersion = null
    versionClass.eachLine{
        def regex = (it =~ /(?:.*VERSION = \")(.*)(?:\".*)/)
        if (regex.matches()) {
            outVersion = regex[0][1]
        }
    }
    return outVersion
}

ext.VERSION_NAME = projectVersion()

println "SDK version is ${ext.VERSION_NAME}"

def updateReadmeVersion() {
    //UPDATE readme only when dev is working with new production version
    if (ext.VERSION_NAME.contains("SNAPSHOT"))
        return
    println "Updating readme file with ${ext.VERSION_NAME}"
    def readmeFile = file('README.md')
    StringBuilder outContent = new StringBuilder()
    boolean shouldWrite = false
    readmeFile.eachLine {
        def regex = (it =~ /(?:.*me.digi.sdk:digime-core:)(.*)(?:\'.*)/)
        if (regex.matches() && !project.version.equals(regex[0][1])) {
            shouldWrite = true
            outContent.append(it.replace(regex[0][1], project.version)).append("\n")
        } else {
            outContent.append(it).append("\n")
        }
    }
    if (shouldWrite) {
        readmeFile.write(outContent.toString().trim(), "UTF-8")
    }
}

updateReadmeVersion()

task clean(type: Delete) {
    delete rootProject.buildDir
}
